|**
----------------------------
CH2.mac updated version 10.01.2017
----------------------------
This macro will run a chchain on clerics/druid/shaman.
It can run multiple chchains at once

    
Usage: /mac ch2
			  /bc command	chainID	tankName 	delay	comma separated list of healers
Start Chain1: /bc chstart	1 		Xiris 		15 		Xirael,Xinshia,Xanshia,Xenshia
				  
Start Chain2: /bc chstart 1 tankName delay cleric1,cleric2,...clericN

Stop  Chain:  /bc chstop 1
______________________________________________
REVISION HISTORY
    03.04.2015	xiris	INITIAL REVISION
	10.01.2017  xiris   Random code clean up
______________________________________________
REQUIRED PLUGINS
    mq2cast
    mq2eqbc
    mq2moveutils
	mq2twist
______________________________________________
REQUIRED INCLUDES 
	xiris_common/xiris_common.inc
**|


#include xiris_common/xiris_common.inc

#Event BC		"<#1#> #2#"

#turbo 40


Sub Main(string _strTankName, int _intAssistAt, int _intTankHealPoint, string _strTankName2)
	/echo This line and the next here because calling a macro from a macro ...
	/echo ... apparently causes problems for the first line in the second macro
	/echo You are now in xiris_bot_${Me.Class.ShortName}.mac [I learned this from E3!~]
	
	|-- initialize common xbot variables
	/call xbot_initialize ${_strTankName} ${_intAssistAt} ${_intTankHealPoint} ${_strTankName2}
	
	|-- initialize variables specific to this macro
	/call variant_initialize
	
	|-- report status
	/bc [${Me.Class.ShortName}] ${Me.Name} ${str_action} >> ${Spawn[${_strTankName}].CleanName} <<  @ ${_intTankHealPoint}

|**
 ----------------------------
 Main Loop
 ----------------------------
 Runs in order listed,
 if adding any routine add the call here
 ----------------------------
**|

	:MainLoop
		/call RunAllEvents
		/call chkNeedCure
		/doevents BC
		/delay 5
	/goto :MainLoop

/return

Sub chkPosition
	/if (${Zone.ID} != ${zoneID}) /return
	/if (${Me.Casting.ID}) /return
	/if (!${bln_useCAMP})  /return
	/declare campDist int local
	/varcalc campDist ${Math.Distance[${Me.Y},${Me.X}:${int_campY},${int_campX}]}
	/if (${campDist}>10) {
		/moveto ${int_campY} ${int_campX} ${int_campZ}
		/return
	}
/return

Sub Event_BC(ChatType,Sender,ChatText)

	|/echo event BC [${ChatText}]
	/varset command	${ChatText.Arg[1]}
	
	|-------------------------------
	/if (${command.Equal[chstart]}) {
		|-- check to see if this chstart applies to me
		/call chkInclusion ${ChatText.Arg[6]}
		|-- check returned true, set the session vars
		
		/if (${Macro.Return}) {
			/varset chainID ${ChatText.Arg[2]}
			/varset tankOne ${ChatText.Arg[3]}
			/varset tankTwo ${ChatText.Arg[4]}
			/varset delay   ${ChatText.Arg[5]}
			/varset order 	${ChatText.Arg[6]}
			/varset bln_chChainMember TRUE
			/call chcStart
		}
			
	}
	|-------------------------------
	/if (${command.Equal[chstop]}) {
		|-- check to see if this chstop applies to me
		/echo chstop called ${ChatText.Arg[2]} == ${chainID}
		/if (${ChatText.Arg[2]} == ${chainID}) /call chcstop
	}
 /return
 
|-------------------------------------------------------------------------------- 
|SUB: chkInclusion - Used to see if this CHStart command is applicable to me
|--------------------------------------------------------------------------------
 Sub chkInclusion(OrderList)
	/declare included bool local FALSE
	/declare len int local ${Math.Calc[${OrderList.Count[,]}+1]}
	/declare x int local
	/for x 1 to ${len}
		/if (${OrderList.Arg[${x},,].Equal[${Me.CleanName}]}) {
			/varset included TRUE
			/varset position ${Math.Calc[${x}-1]}
		}
	/next x
 /return ${included}
 
|-------------------------------------------------------------------------------- 
|SUB: chcStart - CH Chain should start up based on my inclusion in the order list.
|--------------------------------------------------------------------------------
 Sub chcStart
	/doevents flush
	/bc [${Me.Class.ShortName}] ${Me.Name} ${str_action} >> ${Spawn[${str_tankName1}].CleanName} <<  @ ${int_point_tankNormal}
	/varset active TRUE
	
	|-- how long should I wait before starting my chain twist?
	/declare startDelay int local ${Math.Calc[${delay}*${position}+1]}
	/echo delaying : ${startDelay} = [${delay}*${position}+1]
	/delay ${startDelay}
	/call chcTwist
/return

Sub chcTwist
	:Loop
		/if (!${active}) /return
		/if (!${Spawn[pc ${tankOne}].PctHPs} && !${tankOne.Equal[${tankTwo}]}) {
			/varset tankOne ${tankTwo}
		}
		/if (!${Spawn[pc ${tankOne}].PctHPs}) {
			/echo CHChain ${chainID} Cannot Find Tank of Last Resort ${tankTwo}
			/delay 1s
			/varset active FALSE
			/return
		}
		/if (${Me.CurrentMana} < ${Math.Calc[${Spell[${chSpell}].Mana}+20]}) {
			/echo CHChain ${chainID} OOM
			/varset active FALSE
			/return
		}
		
		/if (${Spawn[pc ${CHealTank}].Distance} > ${Spell[${CHealSpell}].Range}) {
			/echo CHChain ${chainID} ${tankOne} OOR!
		}
		
		/target ${Spawn[pc ${tankOne}].CleanName}
		/delay 2s ${Target.CleanName.Equal[${tankOne}]}
		/delay 20s ${Me.SpellReady[${chSpell}]}
	    /bc [${chainID}]:[${position}] CHC->${tankOne} hp:${Target.PctHPs} d:${Target.Distance} m:${Me.PctMana}
		/delay ${delay}
		/call Cast "${chSpell}" gem9 5s chcEvents
		/doevents
	/goto :Loop
/return



Sub chcStop
	/echo killing chchain
	/if (!${active}) /return
	/varset active FALSE
/return

Sub chcEvents
	/doevents
/return

|**
 ----------------------------
 Target Engage
 ----------------------------
 Engage the target, note usually triggered by EVENT_KILLMOB (see xiris_common.inc)
 ----------------------------
**|
Sub engageTarget(_targetID)
	/echo engageTarget ${Spawn[id ${_targetID}].CleanName} (${_targetID})
	/varset int_targetID ${_targetID}
	/varset bln_engaged TRUE
/return


Sub targetReset
	/varset bln_engaged FALSE
/return



|**
 ----------------------------
 INITIALIZATION Subs
 ----------------------------
 Initialization of values for this specific macro variant
 ----------------------------
**| 

Sub variant_initialize
	
	
	|-- set up default vars
	/declare    str_action				string	outer	"Complete Heal"
	/declare	command					string	outer
	/declare	position				int     outer
	/declare	chainID					int     outer
	/declare	tankOne					string	outer
	/declare	tankTwo					string	outer
	/declare	delay					int     outer
	/declare	order					string  outer	
	/declare	active					bool	outer	FALSE
	/declare	bln_chChainMember		bool	outer	TRUE
	
	/declare chSpell 	string outer
	/if (${Me.Class.Name.Equal[Cleric]}) /varset chSpell Complete Heal
    /if (${Me.Class.Name.Equal[Druid]})  /varset chSpell Karana's Renewal
    /if (${Me.Class.Name.Equal[Shaman]}) /varset chSpell Kragg's Mending
	
	
	
	/memspellset default
	/echo ${Me.Class} CH Loaded: Tank: ${str_MTName}(${int_MTID}) HP: ${int_point_tankNormal} SecondaryTank: ${str_tankName2}(${int_STID})
	
/return



 