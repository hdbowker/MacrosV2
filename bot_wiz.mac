|**
----------------------------
BOT_WIZ.mac
----------------------------
This macro is configured for use by any melee class
Modify the BOT_CLS_CHARNAME.ini file for use by a specific toon
This was written ground up for usage with xiris's bots.
It heavily relies on mq2melee for specific class functionality

Usage: /mac bot_wiz ${_tank1Name} ${_tank2Name} ${_healPoint} ${_assistArgs}

______________________________________________
REVISION HISTORY
	11.09.10	xiris	INITIAL REVISION using modified bot_nec
	11.16.10	xiris	Fixed some of the subs to be inline with latest changes
	09.04.15	xiris	Changed the variant_initialize to better handle the output from the loader
	07.01.16	xiris 	Added manaburn event
	11.11.17	xiris   Added support for removal of mq2melee
	09.17.18    xiris   Included ALL xiris bot libraries in common instead of in individual macros
	04.05.22 	xiris	Added new Events aggregator and handlers
______________________________________________
REQUIRED PLUGINS
    mq2cast
    mq2eqbc
    mq2debuffs
    mq2moveutils
    
______________________________________________
REQUIRED INCLUDES  
	xiris_common/xiris_common.inc
**|

#include xiris_common/xiris_common.inc

#Turbo 40

#EVENT MANABURN	"#*#manaburnON"
#EVENT AEON 	"#*#aeNukeON"
#EVENT AEOFF	"#*#aeNukeOFF"
#EVENT FIRETL "#*#firetl#*#"

Sub InitEvents_Class
	/call RegisterClassEvents Events_WIZ 4
/return

Sub Events_WIZ
	/doevents AEON
	/doevents AEOFF
	/doevents MANABURN
	/doevents FIRETL
/return 


Sub Main(string _tank1Name, string _tank2Name, string _tank3Name, int _healPoint, string _assistArgs)
	/echo This line and the next here because calling a macro from a macro ...
	/echo ... apparently causes problems for the first line in the second macro
	/echo You are now in xiris_bot_${Me.Class.ShortName}.mac [I learned this from E3!~]

	|-- initialize the common xbot libraries
	/call xbot_initialize ${_tank1Name} ${_tank2Name} ${_tank3Name} ${_healPoint} ${_assistArgs}

	|-- initialize the macro specific libraries
	/call variant_initialize

	|-- report my status
	/bc [${Me.Class.ShortName}] ${Me.Name} ${str_action} >> ${Spawn[${_tank1Name}].CleanName} <<

	|-- target the MT
	/call TrueTarget ${int_MTID}

	|**
	----------------------------
	Main Loop
	----------------------------
	Runs in order listed,
	if adding any routine add the call here
	----------------------------
	**|

	:MainLoop
    
		/if (${Me.Casting.ID} && ${Me.Hovering}||${Window[tradewnd].Open}||${Window[lootwnd].Open}) /goto :MainLoop
	
		|-- Check to make sure MT is still alive, if not, find another
		/call chkMTAlive FALSE
		
		|-- Check to see if self needs to be cured (xiris_curing.inc)
		/call RunAllEvents
		/call chkNeedCure
    
		/if (${bln_engaged}) {
			|-- class specific
			/call RunAllEvents
			/call chkConcussion
			/call chkSingleTargetDebuff
			/call chkSnare
			
			|-- dps lib
			/call RunRaidEvents
    		/call RunClassEvents
			/call chkTarget
			/call chkQNuke
			/call chkNuke
			/call chkAENuke
			/call chkConcussion
			
			|-- std library
			/call RunRaidEvents
    		/call RunClassEvents
			/call chkAAs
			/call chkBurn
			/call chkClicks
			/call chkConcussion
		}
		
		|-- check utilities, includes: sit,loot,leash (out of combat only)
		/if (!${bln_engaged}) {
			/call chkUtils
			/call chkDownshits
		}
	|-- start again	
	/call chkMobDead
    /goto :MainLoop
/return


|**
 ----------------------------
 Target Checking
 ----------------------------
 Determines if the main assist has a new target, and whether we can attack
 ----------------------------
**|
Sub chkTarget
	|-- Check for Target Death
	:chkTargetDead
    /if ((!${Target.ID} || ${Target.Type.NotEqual[NPC]}) && ${bln_engaged}) {
		/echo Mob is dead. Engage off.
        /varset bln_engaged FALSE
		/varset int_targetID 0
		/goto :return
    } 
	
	|-- Check to see if I am on HoTT
	:chkHoTT
	/if (${Me.TargetOfTarget.CleanName.Equal[${Me.CleanName}]}) {
		/echo pulled aggro, hitting mindcrash if ready, concussion if not
		/if (${Me.AltAbilityReady[Mind Crash]}) /call Cast "Mind Crash" alt
		/delay 10
		/if (${Me.SpellReady[${str_concSpell}]}) /call Cast "${str_concSpell}" ${str_concGem}
		/delay 10
	}
	:return
/return

|**
 ----------------------------
 Target Engage
 ----------------------------
 Engage the target, note usually triggered by EVENT_KILLMOB (see xiris_common.inc)
 ----------------------------
**|

Sub engageTarget(_targetID)
	/echo engageTarget ${Spawn[id ${_targetID}].CleanName} (${_targetID})
	/if (${_targetID} == 0) /return
	/varset int_targetID ${_targetID}
	/call TrueTarget ${_targetID}
	/varset bln_engaged TRUE
	
	|- Wizard specific things
	/varset bln_snareActive		FALSE
	
/return


Sub targetReset
	/varset bln_engaged FALSE
/return


|**
 ----------------------------
 Concussion  
 ----------------------------
 If Concussion counter is hit, Concussion to kill aggro
 ----------------------------
**|
Sub chkConcussion
	/if (!${bln_engaged} || ${Me.Invis}||${Me.Moving}||!${bln_concUse}) /return 
	
	|/echo chkConcussion: ${bln_concUse} && ${Me.Standing} && (${int_concCount}>=${int_concCountActive})
	/if (${bln_concUse} && ${Me.Standing} && (${int_concCount}>=${int_concCountActive})) {
		/call chkSpellMemorized "${str_concSpell}" ${str_concGem} TRUE
		/call Cast "${str_concSpell}" ${str_concGem}
		/varset timer_concDelay ${timer_concDelay.OriginalValue}
		/varset int_concCount 0
	}
/return


|**
 ----------------------------
 Utility Checking
 ----------------------------
 Checks the utilities such as fail states (GM, Lobby, etc)
 Checks to see if we should med, loot, leash
 ----------------------------
**|
Sub chkUtils
	/call chkSit
	/call chkLoot
	/call chkLeash
/return


|**
 ----------------------------
 INITIALIZATION Subs
 ----------------------------
 Initialization of values for this specific macro variant
 ----------------------------
**| 
Sub variant_initialize(string _strTankName, int _intAssistAt, int _intTankHealPoint, string _strTankName2)		
	
	|-- set up default vars
	/declare    str_action				string	outer	Assisting	

	|--Concussion
	/declare bln_concUse				bool	outer 	${Ini[botINI,Concussion,bln_concUse,TRUE]}
	/declare bln_concAggro				bool	outer 	${Ini[botINI,Concussion,bln_concAggro,FALSE]}
	/declare int_concCountActive		int		outer	${Ini[botINI,Concussion,int_concCountActive,5]}
	/declare str_concSpell				string	outer   ${Ini[botINI,Concussion,str_concSpell,Ancient: Greater Concussion]}
	/declare str_concGem				string	outer   ${Ini[botINI,Concussion,str_concGem,alt]}
	/declare timer_concDelay			timer	outer   ${Ini[botINI,Concussion,timer_concDelay,3s]}
	
	|--Translocation
	/declare bln_tlUse					bool	outer  ${Ini[botINI,Translocation,bln_tlUse,TRUE]}
	/declare str_tlSpell				string	outer   ${Ini[botINI,Translocation,str_tlSpell,Teleport]}
	/declare str_tlGem				string	outer   ${Ini[botINI,Translocation,str_tlGem,gem6]}

	|--Snaring
	/declare bln_snareUse				bool	outer	${Ini[botINI,Snare,bln_snareUse,FALSE]}
	/declare int_snareHP				int		outer	${Ini[botINI,Snare,int_snareHP,35]}
	/if (!${Defined[str_snareSpell]}) /declare str_snareSpell string	outer	${Ini[botINI,Snare,str_snareSpell,Atol's Spectral Shackles]}
	/varset str_snareSpell	${Ini[botINI,Snare,str_snareSpell,Atol's Spectral Shackles]}
	/declare str_snareGem				string	outer   ${Ini[botINI,Snare,str_snareSpell,alt]}
	/declare int_snareLocalNPC			int		outer	${Ini[botINI,Snare,int_snareLocalNPC,99]}
	/declare bln_snareActive			bool	outer	FALSE
	/declare int_snareCounter			int		outer	0
	

	/memspellset default
	/cecho \at${Me.Class.Name} Loaded: MT: ${str_MTName}(${int_MTID})HealPoint:${int_point_tankNormal} SAName: ${str_tankName2}(${int_STID})
	/call InitEvents_Class
/return


Sub EVENT_MANABURN
	/echo MBURN CALLED
	/call Cast "Mana Burn" alt
	/doevents flush
/return

Sub EVENT_AEON
	/echo AE Nuking ACTIVE
	/varset AENuke_Active TRUE
/return

SUB EVENT_AEOFF
	/echo AE Nuking DISABLED
	/varset AENuke_Active FALSE
/return

SUB EVENT_FIRETL(line, ChatSender, eventParams)
	/echo EVENT_FIRETL: ${line}, ${ChatSender} ${eventParams}
	/if (!${bln_tlUse}) /return
	/doevents flush
	/bc Firing TL
	/call Cast "${str_tlSpell}" ${str_tlGem}
	/delay 1m
	/memspellset default
/return









