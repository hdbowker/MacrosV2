| Smith.mac version 1.0
|
| Written by Armysoldier
|
| March 5 2006
|
| Modifications:
| 17 APR 2011: Updated to use recipes available in the NEW UI list
|
| 23 APR 2006: added another loc to keep from getting stuck at forge
|
| 26 MAR 2006: moved 2 subs and event declarations to CommonSubs.inc
|
| This new line of tradeskill macros uses the NEW UI and the OLD UI for TS containers
| 
| The Macro will attempt to find the recipe using the NEW UI first
| If no recipe is found it will go Old school and do a set of combines
| these macros take into account the SALVAGE function and react accordingly
| 
|
| A special thanks to A_Druid_00 for advising on some streamlining modifications
| and to Override for his Tradeskill Code that has been around for so long 
| and is the inspiration for this code
|
| Some of the code was pulled from other macros and modified and manipulated 
| to do the tasks set forth.
|
| This code is designed for Abysmal Sea
|
| *** FOR THIS CODE TO WORK ***
| You need to Stand behind Snokin Breaksteel
| You need to be in the first person view
| You need to ensure that when you click the tradeskill container the NEW UI comes up first
| the 5 FILES need to be in the macro\common folder (see includes below)


#include common/sell.inc
#include common/buy.inc
#include common/packs.inc
#include common/cleanpacks.inc
#include common/CommonSubs.inc


Sub Main
	/declare OldSkill int outer ${Me.Skill[Blacksmithing]}
	/declare SkillMaxWanted int outer
	/declare PackCode string outer 
	/declare Component[10] string outer
	/declare i int outer
	/declare MerchantNameA string Outer
	/declare MerchantNameB string Outer
	/declare MerchantNameC string Outer
	/declare MerchantNameD string Outer
	/declare CombItemName string outer
	/declare ItemTo string outer
	/declare ItemToB string outer na
	/declare ItemToC string outer na
	/declare ItemToD string outer na
	/declare EndingVar int outer
	/declare DelayMult int outer
	/declare Container string outer
	/declare Checkrecipe string outer
	/declare NewUI int outer
	/declare Ingredcount int outer 40
	/declare Trophytrigger string outer
	/declare tx1 int local
	/declare tx2 int local
	/declare TotalSkillUps int outer 0
	/declare CurrentSkill int outer 0
	/declare SellBack string outer
	/declare LastPlat int local 0
	/declare PlatSpent int local 0
	/declare MaxPlat int local 0
	/declare MinPlat int local 0
	/declare PlatTemp int local 0
	/declare MaxPCNear int outer 1
	/declare MaxPCNearDist int outer 150
	/declare MaxIngredcount int local 0

|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
| Customize these settings if you want
|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	/varset MerchantNameA Snokin Breaksteel
	/varset MerchantNameB Cevroy Sharpaxe
	/varset MerchantNameC Dray Cuves
	/varset MerchantNameD Esunta
	/varset DelayMult 1
	/declare Filename string outer xiris_trade_ini/xiris_trade_smithing.ini
	/varset SkillMaxWanted ${Int[${Ini[${Filename},Default,SkillMax,300]}]}
	/varset MaxPlat ${Int[${Ini[${Filename},Default,MaxPlatSpent,0]}]}
	/varset MinPlat ${Int[${Ini[${Filename},Default,MinPlatStart,100]}]}
	/varset MaxPCNear ${Int[${Ini[${Filename},Default,MaxPCs,1]}]}
	/varset MaxPCNearDist ${Int[${Ini[${Filename},Default,MaxPCsDist,250]}]}
	/varset Trophytrigger ${Ini[${Filename},Default,Trophy,no]} 
	/varset SellBack ${Ini[${Filename},Default,SellBackComponents,yes]} 
	/if (${MaxPCNear}<1) /varset MaxPCNear 1
	/if (${MaxPCNearDist}<100) /varset MaxPCNearDist 100

	/call ReadINIA ${Filename} "Abysmal Sea"
	/if (!${Defined[LocArray]}) { 
		/echo No location array created, or INI is missing... Stopping macro!
		/end
	} 

|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
| Begin 
|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	/if (${Zone.ID}!=279) { 
		/echo You must be in The Abysmal Sea, behind ${MerchantNameA}, before starting this macro.
		/end
	} else {
		/if (${Spawn[${MerchantNameA}].Distance}>20) {
			/echo You must be in The Abysmal Sea, behind ${MerchantNameA}, before starting this macro.
			/end
		}
	}
	
	/varset LastPlat ${Me.Platinum}

	:start

	/if (${Zone.ID}!=279) /end

	
| To test a skill section, set Trophy=yes in the INI, and comment out CurrentSkill then hard code it like:
| /varset CurrentSkill 50
| You can also go further down to where Ingredcount is defined, and lower that if you wish (I use 3 for testing, 40 normally)
	/varset CurrentSkill ${Me.Skill[Blacksmithing]}
	
|--- Check Current Skill against Skill wanted 
	/echo Blacksmithing is currently at ${CurrentSkill}.
	/if (${SkillMaxWanted}==300 && ${Trophytrigger.Equal[yes]}) {
		/varset SkillMaxWanted 301
		/echo Blacksmithing is currently at ${CurrentSkill}, max is set to ${SkillMaxWanted} (for trophy evolution).
	} else {
		/if (${CurrentSkill}>=${SkillMaxWanted}) {
			/echo Blacksmithing is currently at ${CurrentSkill}, max is set to ${SkillMaxWanted}.  Total skill ups this session: ${TotalSkillUps}
			/echo Stopping macro!
			/if (${Window[MerchantWnd].Open}) {
				/nomodkey /notify MerchantWnd MW_Done_Button LeftMouseUp
				/call ClosePacks
			}
			/end
		}
	}
	/if (${Me.Platinum}<${LastPlat}) {
		/varset PlatTemp ${Math.Calc[${LastPlat}-${Me.Platinum}]}
		/varset LastPlat ${Me.Platinum}
		/varset PlatSpent ${Math.Calc[${PlatSpent}+${PlatTemp}]}
		/if (${MaxPlat}) {
			/if (${PlatSpent}>=${MaxPlat}) {
				/echo Blacksmithing is currently at ${CurrentSkill}, max is set to ${SkillMaxWanted}.  Total skill ups this session: ${TotalSkillUps}
				/echo Spent max allowed platinum (${MaxPlat}) for this session!
				/echo Stopping macro!
				/if (${Window[MerchantWnd].Open}) {
					/nomodkey /notify MerchantWnd MW_Done_Button LeftMouseUp
					/call ClosePacks
				}
				/end
			}
		}
	} else {
		/if (${Me.Platinum}>${LastPlat}) /varset LastPlat ${Me.Platinum}
	}
		
	/if (${Me.Platinum}<${MinPlat}) {
		/echo Blacksmithing is currently at ${CurrentSkill}, max is set to ${SkillMaxWanted}.  Total skill ups this session: ${TotalSkillUps}
		/echo You need to have at least ${MinPlat} pp on you!
		/echo Stopping macro!
		/if (${Window[MerchantWnd].Open}) {
			/nomodkey /notify MerchantWnd MW_Done_Button LeftMouseUp
			/call ClosePacks
		}
    /end
  }

	/if (${CurrentSkill}<31) {
		/varset CombItemName SM
		/varset ItemTo Sheet Metal
	}
	/if (${CurrentSkill}>=31 && ${CurrentSkill}<72) {
		/varset CombItemName FMS
		/varset ItemTo Forged Morning Star
	}
	/if (${CurrentSkill}>=72 && ${CurrentSkill}<92) {
		/varset CombItemName BG
		/varset ItemTo Banded Gorget
	}
	/if (${CurrentSkill}>=92 && ${CurrentSkill}<102) {
		/varset CombItemName BC
		/varset ItemTo Banded Cloak
	}
	/if (${CurrentSkill}>=102 && ${CurrentSkill}<115) {
		/varset CombItemName BM
		/varset ItemTo Banded Mail
	}
	/if (${CurrentSkill}>=115) {
		/echo Blacksmithing is currently at ${CurrentSkill}, max is set to ${SkillMaxWanted}.  Total skill ups this session: ${TotalSkillUps}
		/echo Setup not complete for skill >= 115.  Stopping macro.
		/if (${Window[MerchantWnd].Open}) {
			/nomodkey /notify MerchantWnd MW_Done_Button LeftMouseUp
			/call ClosePacks
		}
		/end
	}
	/call ReadIni ${CombItemName}
	
|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
| Buy Components
|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	/echo Recipe ${CombItemName}: ${ItemTo}
	/varset Ingredcount ${Int[${Ini[${Filename},Default,IngredientCount,40]}]}
	/if (${MaxIngredcount} && ${MaxIngredcount}<${Ingredcount}) /varset Ingredcount ${MaxIngredcount}
	/if (${Ingredcount} > 120) /varset Ingredcount 120
	/if (${Me.FreeInventory}<${Math.Calc[2*${Ingredcount}+8]}) {
		/if (${Window[MerchantWnd].Open}) {
			/nomodkey /notify MerchantWnd MW_Done_Button LeftMouseUp
			/call ClosePacks
		}
		/echo Not enough empty inventory slots.  Created items do not stack.  You need at least ${Int[${Math.Calc[2*${Ingredcount}+8]}]} slots free, or lower the IngredientCount in ${Filename}.
		/echo Stopping macro!
		/end
	}
	/varset EndingVar 1
	/varset NewUI 1

	/if (!${Window[MerchantWnd].Open}) {
		/target ${MerchantNameA}
		/nomodkey /click right target
		/delay 5s ${Window[MerchantWnd].Open}
		/call OpenPacks
	}
	/if (${CurrentSkill}<31) {
		/if (${Component[2].Length}>2 && ${FindItemCount[=${Component[2]}]}<${Math.Calc[2*${Ingredcount}]}) /call PCBuy "${Component[2]}" ${Math.Calc[2*${Ingredcount}]}
		/nomodkey /notify MerchantWnd MW_Done_Button LeftMouseUp

		/call Movement2 1 4 2
	} 
	/if (${CurrentSkill}>=31 && ${CurrentSkill}<92 && ${Component[2].Length}>2) /call Buy "${Component[2]}" ${Ingredcount}
	/if (${CurrentSkill}>=92 && ${CurrentSkill}<102 && ${Component[2].Length}>2) /call Buy "${Component[2]}" ${Math.Calc[2*${Ingredcount}]}
	/if (${CurrentSkill}>=102 && ${CurrentSkill}<115 && ${Component[2].Length}>2) /call Buy "${Component[2]}" ${Math.Calc[3*${Ingredcount}]}
	/if (${CurrentSkill}>=31 && ${CurrentSkill}<72) {
		/nomodkey /notify MerchantWnd MW_Done_Button LeftMouseUp
		/echo Moving to ${MerchantNameD}
		/call Movement2 22 23 0
		/target ${MerchantNameD}
		/delay 3s ${Target.ID}==${Spawn[${MerchantNameD}].ID}
		/nomodkey /click right target
		/delay 5s ${Window[MerchantWnd].Open}
		/if (${Component[1].Length}>2) /call Buy "${Component[1]}" ${Ingredcount}
		/if (${Component[4].Length}>2) /call Buy "${Component[4]}" ${Ingredcount}
		/nomodkey /notify MerchantWnd MW_Done_Button LeftMouseUp

		/echo Moving
		/call Movement2 1 4 2
	}
	/if (${CurrentSkill}>=72) {
		/nomodkey /notify MerchantWnd MW_Done_Button LeftMouseUp
		/echo Moving to ${MerchantNameB}

		/call Movement2 1 4 2
		/target ${MerchantNameB}
		/delay 5s ${Target.ID}==${Spawn[${MerchantNameB}].ID}
		/nomodkey /click right target
		/delay 5s ${Window[MerchantWnd].Open}
		/if (${Component[1].Length}>2) /call Buy "${Component[1]}" ${Ingredcount}
		/nomodkey /notify MerchantWnd MW_Done_Button LeftMouseUp
	}
	|  *** BUY Water Flasks *** Common to all
	/if (${Component[3].Length}>2 && ${FindItemCount[=${Component[3]}]}<${Ingredcount}) {

		/echo Moving to ${MerchantNameC}
		/call Movement2 5 11 9
		/target ${MerchantNameC}
		/delay 5s ${Target.ID}==${Spawn[${MerchantNameC}].ID}
		/nomodkey /click right target
		/delay 3s
		/if (${Component[3].Length}>2) /call Buy "${Component[3]}" ${Math.Calc[4*${Ingredcount}]}
		/nomodkey /notify MerchantWnd MW_Done_Button LeftMouseUp
		/call ClosePacks

		/echo Moving to the Forge
		/call Movement2 12 17 14
	} else {

	}

|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
| MAKE Items
|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	/squelch /nomodkey /itemtarget forge notarget 
	/squelch /face item nolook 
	/nomodkey /click left item 
	/doevents 
	/delay 3s ${Window[TradeskillWnd].Open} 
	/delay 3s ${Window[TradeskillWnd].Open} 
	/if (!${Window[TradeskillWnd].Open}) /nomodkey /click left Item 
	/delay 3s ${Window[TradeskillWnd].Open} 
	/doevents
	/call ChooseRecipeExact
	/call ClosePacks

	/echo Moving to ${MerchantNameA}
	/if (${SellBack.Equal[yes]}) /echo Selling off and starting over
	/call Movement2 18 21 20
	/target ${MerchantNameA}
	/delay 5s ${Target.ID}==${Spawn[${MerchantNameA}].ID}
	/if (${SellBack.Equal[yes]} && ${ItemTo.NotEqual[Sheet Metal]}) {
		/nomodkey /click right target
		/delay 1s
		/call OpenPacks
		/call Sell "${ItemTo}"
		/call Sell "${Component[1]}"
	}
	/doevents
	/goto :start
	/return

|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
|Sub Event Skill up
|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
Sub Event_Skillup
	/if (${Me.Skill[Blacksmithing]}>${OldSkill}) {
		/varset TotalSkillUps ${Math.Calc[${TotalSkillUps}+1]}
		/echo Your Blacksmithing went up!! It's now ${Me.Skill[Blacksmithing]}!  Total skill ups this session: ${TotalSkillUps}
		/varset OldSkill ${Me.Skill[Blacksmithing]}
	}
	/return

|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
|Sub Event No Longer Advance 
|used if there are some subcombines that need to be made in some TS
|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Sub Event_Advance
	/if (${Trophytrigger.NotEqual[yes]}) /varset EndingVar 2
	/return 

Sub DoGMCheck
	/if (${Spawn[gm].ID}) {
		/echo
		/echo ${Macro.Name}: GM in zone, stopping macro!
		/end
	}
	/return

Sub DoPCCheck
	:pccheck
	/if (${SpawnCount[pc radius ${MaxPCNearDist}]}>${MaxPCNear}) {
		/echo ${Macro.Name}: PC is near, macro is paused until they move away...
		/delay 60s ${SpawnCount[pc radius ${MaxPCNearDist}]}<=${MaxPCNear}
		/goto :pccheck
	}
	/return
